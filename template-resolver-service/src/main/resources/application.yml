server:
  port: ${TEMPLATE_RESOLVER_SERVICE_PORT:0}

spring:
  config:
    import: optional:file:.env[.properties]

  application:
    name: ${TEMPLATE_RESOLVER_SERVICE_NAME:template-resolver-service}

  data:
    mongodb:
      uri: ${TEMPLATE_RESOLVER_SERVICE_MONGODB_URI:uri}
      database: ${TEMPLATE_RESOLVER_SERVICE_MONGODB_DATABASE:template-resolver-service-db}
      auto-index-creation: true

  kafka:
    bootstrap-servers: ${CLOUD_KAFKA_BROKER_URL}
    properties:
      security:
        protocol: SASL_SSL
      sasl:
        mechanism: SCRAM-SHA-256
        jaas:
          config: org.apache.kafka.common.security.scram.ScramLoginModule required
            username="${CLOUD_KAFKA_USERNAME}" password="${CLOUD_KAFKA_PASSWORD}";

    consumer:
      auto-offset-reset: latest
      group-id: ${CLOUD_KAFKA_USERNAME}-consumers
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: '*'
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        enable:
          idempotence: false
        spring:
          json:
            add:
              type:
                headers: false

kafka:
  topic:
    in: ${CLOUD_KAFKA_USERNAME}-${TEMPLATE_RESOLVER_SERVICE_TOPIC_IN:template-resolver-topic}
    out: ${CLOUD_KAFKA_USERNAME}-${TEMPLATE_RESOLVER_SERVICE_TOPIC_OUT:publisher-topic}

template:
  default: ${APP_SERVICE_TEMPLATE_DEFAULT:"{{title}} \n {{link}}"}