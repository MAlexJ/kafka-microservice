server:
  port: ${STORAGE_SERVICE_PORT:0}

spring:
  config:
    import: optional:file:.env[.properties]

  application:
    name: ${STORAGE_SERVICE_NAME:storage-service}

  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL8Dialect

  threads:
    virtual:
      enabled: true

  boot:
    admin:
      client:
        enabled: ${ADMIN_SERVICE_ENABLE_MONITORING:false}
        url: ${ADMIN_SERVICE_URL:http://localhost:8999}

  r2dbc:
    url: r2dbc:mysql://${STORAGE_SERVICE_MYSQL_URL}:${STORAGE_SERVICE_MYSQL_PORT}/${STORAGE_SERVICE_MYSQL_DATABASE}
    username: ${STORAGE_SERVICE_MYSQL_USERNAME}
    password: ${STORAGE_SERVICE_MYSQL_PASSWORD}
    pool:
      enabled: true

  rabbitmq:
    username: ${STORAGE_SERVICE_RABBITMQ_USERNAME}
    password: ${STORAGE_SERVICE_RABBITMQ_PASSWORD}
    port: ${STORAGE_SERVICE_RABBITMQ_PORT}
    host: ${STORAGE_SERVICE_RABBITMQ_HOST}
    virtualhost: ${STORAGE_SERVICE_RABBITMQ_VIRTUAL_HOST}

  flyway:
    locations: classpath:db/mysql.migration
    url: jdbc:mysql://${STORAGE_SERVICE_MYSQL_URL}:${STORAGE_SERVICE_MYSQL_PORT}/${STORAGE_SERVICE_MYSQL_DATABASE}
    user: ${STORAGE_SERVICE_MYSQL_USERNAME}
    password: ${STORAGE_SERVICE_MYSQL_PASSWORD}
    validate-on-migrate: true

logging:
  level:
    root: ${APP_SERVICE_ROOT_LOG_LEVEL:INFO}
    #    org.springframework: ${APP_SERVICE_SPRING_LOG_LEVEL:DEBUG}
    com:
      malex:
        storageservice:
          kafka:
            consumer: DEBUG
          service: DEBUG
    org:
      springframework:
        r2dbc: DEBUG

kafka:
  topic:
    in: ${CLOUD_KAFKA_USERNAME}-${STORAGE_SERVICE_TOPIC_IN:storage-topic}
  server:
    bootstrapServer: ${CLOUD_KAFKA_BROKER_URL}
    propertySecurityProtocol: SASL_SSL
    propertySaslMechanism: SCRAM-SHA-256
    propertySaslJaasConfig: org.apache.kafka.common.security.scram.ScramLoginModule required username="${CLOUD_KAFKA_USERNAME}" password="${CLOUD_KAFKA_PASSWORD}";
  consumer:
    autoOffsetReset: earliest
    groupId: ${CLOUD_KAFKA_USERNAME}-consumers
    keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer
    valueDeserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    propertySpringJsonTrustedPackages: '*'

rabbitmq:
  queue:
    forward: ${STORAGE_SERVICE_RABBITMQ_QUEUE:storage_service_queue}
    replay: ${STORAGE_SERVICE_RABBITMQ_REPLAY_QUEUE:storage_service_replay_queue}
  exchange:
    forward: ${STORAGE_SERVICE_RABBITMQ_EXCHANGE:storage_service_exchange}
    replay: ${STORAGE_SERVICE_RABBITMQ_REPLAY_EXCHANGE:storage_service_replay_exchange}
  routing:
    key:
      forward: ${STORAGE_SERVICE_RABBITMQ_ROUTING_KEY:storage_service_routing_key}
      replay: ${STORAGE_SERVICE_RABBITMQ_REPLAY_ROUTING_KEY:storage_service_replay_routing_key}

management:
  endpoints:
    web:
      exposure:
        include: '*'