buildscript {
    new BufferedReader(new FileReader(file('../gradle.properties')))
            .withCloseable { reader ->
                String line
                while ((line = reader.readLine()) != null) {
                    println(line)
                    String name = line.substring(0, line.indexOf('='))
                    String value = line.substring(line.indexOf('=') + 1)
                    project.ext.set(name, value)
                }
            }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id "com.github.ben-manes.versions" version "${githubBenManesVersion}"
}

group = 'com.malex'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = "${javaVersion}"
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springBootAdminVersion', "${springBootAdminVersion}")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'de.codecentric:spring-boot-admin-starter-client'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
